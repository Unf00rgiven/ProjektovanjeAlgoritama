from math import inf


class Vertex:
    def __init__(self, name):
        self.name = name
        self.p = None
        self.d = inf

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name


class Edge:
    def __init__(self, src, dst, w):
        self.src = src
        self.dst = dst
        self.w = w


class Graph:
    def __init__(self, V, E):
        self.V = V
        self.E = E

    def __str__(self):
        ret_str = ""
        for e in self.E:
            ret_str += str(e.src) + " -> " + str(e.dst) + " , w = " + str(e.w) + "\n"
        return ret_str

    def print_path(self, u, v, l):
        if v is u:
            # print(u)
            l.append(u)
        elif v.p is None:
            print("No valid path")
            return None
        else:
            l = self.print_path(u, v.p, l)
            # print(v)
            l.append(v)
        return l

    def shortest_path(self, u, v):
        self.bellman_ford(u)
        path = self.print_path(u, v, [])
        return path, v.d

    def init_single_source(self, s):
        for v in self.V:
            v.d = inf
            v.p = None
        s.d = 0

    def get_weight(self, u, v):
        for e in self.E:
            if e.src == u and e.dst == v:
                return e.w
        return inf

    def relax(self, u, v, w):
        if v.d > u.d + w:
            v.d = u.d + w
            v.p = u

    def bellman_ford(self, s):
        self.init_single_source(s)
        for v in self.V:
            for e in self.E:
                self.relax(e.src, e.dst, e.w)
        for e in self.E:
            if e.dst.d > e.src.d + e.w:
                return False
        return True

    def get_in_degress(self):
        ret_list = []
        ret_dict = {}

        for v in self.V:
            counter = 0
            for e in self.E:
                if e.dst == v:
                    counter += 1
            ret_list.append(counter)
            ret_dict[v.name] = counter
        return ret_list, ret_dict

    def get_out_degress(self):
        ret_list = []
        ret_dict = {}

        for v in self.V:
            counter = 0
            for e in self.E:
                if e.src == v:
                    counter += 1
            ret_list.append(counter)
            ret_dict[v.name] = counter
        return ret_list, ret_dict

    def update_edge(self, u, v, w):

        for e in self.E:
            if e.src == u and e.dst == v:
                e.w = w
                return
        temp = Edge(u, v, w)
        self.E.append(temp)


if __name__ == "__main__":
    a = Vertex("a")
    b = Vertex("b")
    c = Vertex("c")
    d = Vertex("d")
    e = Vertex("e")
    f = Vertex("f")

    V = [a, b, c, d, e, f]

    e1 = Edge(a, b, -6)
    e2 = Edge(a, e, 15)
    e3 = Edge(a, d, -4)
    e4 = Edge(b, c, 7)
    e5 = Edge(e, c, 13)
    e6 = Edge(d, e, 11)
    e7 = Edge(c, f, -3)
    e8 = Edge(f, e, 5)

    E = [e1, e2, e3, e4, e5, e6, e7, e8]

    G = Graph(V=V, E=E)

    G.bellman_ford(a)
    # G.print_path(s, z)
    # print(z.d)

    print(G)
    print(G.get_in_degress())
    print(G.get_out_degress())
    print()
    print(G.shortest_path(a, b))

    G.update_edge(b, c, -4)
    G.update_edge(d, e, -10)
    print(G.shortest_path(a, f))





